name: Sync Medium Articles

on:
  schedule:
    - cron: "0 9 */7 * *" # Runs every 7th day at 9:00 AM UTC
  workflow_dispatch: # Allows manual trigger

jobs:
  fetch_medium_articles:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      # Step 3: Install dependencies
      - name: Install Python dependencies
        run: pip install feedparser markdownify markdown

      # Step 4: Fetch Medium RSS and convert to Markdown
      - name: Fetch Medium RSS and convert to Markdown
        run: |
          python - <<EOF
          import feedparser
          from markdownify import markdownify as md
          import os
          import re

          # Medium RSS feed URL
          MEDIUM_RSS = "https://medium.com/feed/@jaskaran42"

          # Function to sanitize filenames
          def sanitize_filename(title):
              # Replace invalid characters with underscores or remove them
              title = re.sub(r'[<>:"/\\|?*]', '_', title)  # Replace invalid filename characters
              title = re.sub(r'\s+', '_', title.strip())  # Replace spaces with underscores
              title = re.sub(r'“|”', '', title)  # Remove smart quotes
              return title

          # Fetch and parse RSS feed
          feed = feedparser.parse(MEDIUM_RSS)
          for entry in feed.entries:
              title = entry.title
              link = entry.link
              content = entry.content[0].value if "content" in entry else entry.summary

              # Sanitize title for filenames
              safe_title = sanitize_filename(title)

              # Convert HTML to Markdown
              markdown_content = f"# {title}\n\n{md(content)}\n\n[Read on Medium]({link})"

              # Save to a file in the 'articles' folder
              filename = f"articles/{safe_title}.md"
              os.makedirs("articles", exist_ok=True)
              with open(filename, "w", encoding="utf-8") as f:
                  f.write(markdown_content)
          EOF

      # Step 5: Convert Markdown to HTML
      - name: Convert Markdown to HTML
        run: |
          python - <<EOF
          import markdown
          import os

          # Path to the articles folder
          ARTICLES_DIR = "articles"
          os.makedirs(ARTICLES_DIR, exist_ok=True)

          # Convert each Markdown file to HTML
          for filename in os.listdir(ARTICLES_DIR):
              if filename.endswith(".md"):
                  filepath = os.path.join(ARTICLES_DIR, filename)
                  with open(filepath, "r", encoding="utf-8") as f:
                      md_content = f.read()

                  # Convert Markdown to HTML
                  html_content = markdown.markdown(md_content)

                  # Save the HTML file
                  html_filename = filename.replace(".md", ".html")
                  with open(os.path.join(ARTICLES_DIR, html_filename), "w", encoding="utf-8") as f:
                      f.write(html_content)
          EOF

      # Step 6: Commit and Push Articles
      - name: Commit and Push Articles
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }} # Reference the PAT secret correctly
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git remote set-url origin https://github.com/${{ github.repository }}.git
          git add articles/*
          git commit -m "Add Medium articles [Auto-Generated]" || echo "No changes to commit"
          git push https://x-access-token:${PAT_TOKEN}@github.com/${{ github.repository }}.git --verbose
